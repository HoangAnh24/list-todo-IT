{"version":3,"sources":["components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/ItemList.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","exitForm","onCloseForm","onChange","event","target","name","value","setState","onSubmit","preventDefault","state","onClear","status","id","this","task","nextprops","className","onClick","type","required","Component","Search","context","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","ItemList","onUpdateStatus","onRemove","onUpdate","index","TaskList","onFilter","filterName","filterStatus","listTasks","itemTask","filterstatus","map","key","App","onGenerateData","tasks","randomstring","generate","localStorage","setItem","JSON","stringify","showTaskForm","isDisPlayForm","taskEditing","onShowForm","data","Boolean","push","findIndex","filter","parseInt","toLowerCase","getItem","parse","result","forEach","indexOf","sort","a","b","elmTaskForm","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08959e02.chunk.js","sourcesContent":["import React, { Component } from 'react';  \r\n\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id : \"\",\r\n            name: \"\",\r\n            status: 0\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if(this.props.task){\r\n            this.setState({\r\n                id : this.props.task.id,\r\n                name : this.props.task.name,\r\n                status : this.props.task.status,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextprops) {\r\n        if(nextprops && nextprops.task){\r\n            this.setState({\r\n                id : nextprops.task.id,\r\n                name : nextprops.task.name,\r\n                status : nextprops.task.status,\r\n            });\r\n        } else if (!nextprops.task) {\r\n            this.setState({\r\n                id : \"\",\r\n                name: \"\",\r\n                status: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    exitForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.props.onSubmit(this.state);\r\n        this.onClear();\r\n        this.exitForm();\r\n    }\r\n\r\n    onClear = () => {\r\n        this.setState({\r\n            name: \"\",\r\n            status: 0\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { id } = this.state;\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n        <h3 className=\"panel-title\">{ !id ?  'Thêm Công Việc' : 'Sua cong viec' } <span className=\"fa fa-times-circle pull-right\" onClick={this.exitForm}></span></h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input type=\"text\" name=\"name\" className=\"form-control\" value={this.state.name} onChange={this.onChange} />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select className=\"form-control\" name=\"status\" required=\"required\" value={this.state.status} onChange={this.onChange}>\r\n                            <option value={1}>Kích Hoạt</option>\r\n                            <option value={0}>Ẩn</option>\r\n                        </select>\r\n                        <br />\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">Thêm</button>&nbsp;\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.onClear}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            keyword : ''\r\n        };\r\n    }\r\n    onChange = (event) => {\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n\r\n    render() {\r\n        let { keyword } = this.state;\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" name=\"keyword\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" value={keyword} onChange={this.onChange} />\r\n                <span className=\"input-group-btn\">\r\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSearch}>\r\n                        <span className=\"fa fa-search mr-5\" />Tìm\r\n                    </button>\r\n                </span>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass Sort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy : 'name',\r\n            sortValue : 1\r\n        }\r\n    }\r\n    \r\n    onClick = (sortBy, sortValue) => {\r\n        this.setState({ \r\n            sortBy : sortBy,\r\n            sortValue : sortValue \r\n        });\r\n        this.props.onSort(sortBy,sortValue);\r\n    }\r\n    render() {\r\n        let { sortBy,sortValue } = this.state; \r\n        return (\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\" />\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li onClick={ () => this.onClick('name', -1) }>\r\n                        <a role=\"button\" className={(sortBy==='name'&&sortValue===-1) ? 'select_sort' : ''}>\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\" > Tên A-Z </span>\r\n                        </a>\r\n                    </li>\r\n                    <li  onClick={ () => this.onClick('name', 1) }>\r\n                        <a role=\"button\" className={(sortBy==='name'&&sortValue===1) ? 'select_sort' : ''}>\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\"> Tên Z-A </span>\r\n                        </a>\r\n                    </li>\r\n                    <li role=\"separator\" className=\"divider\" />\r\n                    <li  onClick={ () => this.onClick('status', 1) }><a role=\"button\" className={(sortBy==='status'&&sortValue===1) ? 'select_sort' : ''}>Trạng Thái Kích Hoạt</a></li>\r\n                    <li  onClick={ () => this.onClick('status', -1) }><a role=\"button\" className={(sortBy==='status'&&sortValue===-1) ? 'select_sort' : ''}>Trạng Thái Ẩn</a></li>\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sort;","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\nclass Control extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Search onSearch={this.props.onSearch} />\r\n                </div>\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Sort onSort={this.props.onSort} sortBy={this.props.sortBy} sortValue={this.props.sortValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\r\n\r\nclass ItemList extends Component {\r\n    onUpdateStatus = () => { \r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n\r\n    onRemove = () => {\r\n        this.props.onRemove(this.props.task.id);\r\n    }\r\n\r\n    onUpdate = () => {\r\n        this.props.onUpdate(this.props.task.id);\r\n    }\r\n\r\n    render() {\r\n        let { task,index } = this.props;  \r\n        return (\r\n            <tr>\r\n                <td className=\"text-center\">{ ++index  }</td>\r\n                <td>{ task.name }</td>\r\n                <td className=\"text-center\"> \r\n                    <span onClick={this.onUpdateStatus} className={ task.status ? 'label label-success' : 'label label-warning' }> { task.status  ? 'Kích Hoạt' : 'Ẩn' }  </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={this.onUpdate}>\r\n                        <span className=\"fa fa-pencil mr-5\" />Sửa\r\n                    </button>\r\n                    &nbsp;\r\n                    <button type=\"button\" onClick={this.onRemove} className=\"btn btn-danger\">\r\n                        <span className=\"fa fa-trash mr-5\" />Xóa\r\n                    </button>\r\n                </td>\r\n            </tr> \r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\nimport ItemList from './ItemList'\r\n\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        this.props.onFilter(\r\n            name === 'filterName' ? value : this.state.filterName,\r\n            name === 'filterStatus' ? value : this.state.filterStatus\r\n        );\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        let { listTasks } = this.props;\r\n        let { filterName, filterstatus } = this.state;\r\n        let itemTask = listTasks.map((task, index) => {\r\n            return <ItemList key={index} task={task} index={index} onUpdateStatus={this.props.onUpdateStatus} onRemove={this.props.onRemove} onUpdate={this.props.onUpdate} />;\r\n        });\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"text-center\">STT</th>\r\n                            <th className=\"text-center\">Tên</th>\r\n                            <th className=\"text-center\">Trạng Thái</th>\r\n                            <th className=\"text-center\">Hành Động</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>\r\n                                <input type=\"text\" className=\"form-control\" name=\"filterName\" onChange={this.onChange}/>\r\n                            </td>\r\n                            <td>\r\n                                <select className=\"form-control\" name=\"filterStatus\" onChange={this.onChange}>\r\n                                    <option value=\"-1\">Tất Cả</option>\r\n                                    <option value=\"0\">Ẩn</option>\r\n                                    <option value=\"1\">Kích Hoạt</option>\r\n                                </select>\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                        {itemTask}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TaskForm from './components/TaskForm';\r\nimport ConTrol from './components/Control';\r\nimport TaskList from './components/TaskList';\r\nimport randomstring from 'randomstring';\r\n\r\nclass App extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      tasks: [],\r\n      isDisPlayForm: false,\r\n      filter : {\r\n        filterName : \"\",\r\n        filterStatus: -1\r\n      },\r\n      sortBy : 'name',\r\n      sortValue : 1,\r\n      keyword : \"\"\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    if (localStorage && localStorage.getItem('tasks')) {\r\n      let tasks = JSON.parse(localStorage.getItem('tasks'));\r\n\r\n      this.setState({\r\n        tasks: tasks\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  onGenerateData = () => {\r\n    let tasks = [\r\n      {\r\n        id: randomstring.generate(),\r\n        name: \"học lập trình PHP\",\r\n        status: true,\r\n      },\r\n      {\r\n        id: randomstring.generate(),\r\n        name: \"học lập trình ASP\",\r\n        status: false,\r\n      },\r\n      {\r\n        id: randomstring.generate(),\r\n        name: \"học lập trình Python\",\r\n        status: true,\r\n      },\r\n    ];\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }\r\n\r\n  showTaskForm = () => {\r\n    if (this.state.isDisPlayForm && this.state.taskEditing\r\n      !== null) {\r\n      this.setState({\r\n        isDisPlayForm: true,\r\n        taskEditing: null\r\n      });\r\n    } else { \r\n      this.setState({\r\n        isDisPlayForm: this.state.isDisPlayForm ? false : true,\r\n        taskEditing: null\r\n      });\r\n    }\r\n  }\r\n\r\n  onCloseForm = () => {\r\n    this.setState({\r\n      isDisPlayForm: false\r\n    });\r\n  }\r\n\r\n  onShowForm = () => {\r\n    this.setState({\r\n      isDisPlayForm: true\r\n    });\r\n  }\r\n\r\n  onSubmit = (data) => {\r\n    let { tasks } = this.state;\r\n    if (data.id === '') {\r\n      let task = {\r\n        id: randomstring.generate(),\r\n        name: data.name,\r\n        status: Boolean(data.status)\r\n      };\r\n      tasks.push(task);\r\n    } else {\r\n      var index = this.findIndex(data.id);\r\n      tasks[index] = data;\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      taskEditing: null\r\n    });\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }\r\n\r\n  onUpdateStatus = (id) => {\r\n    let { tasks } = this.state;\r\n    let index = this.findIndex(id);\r\n    if (index !== -1) {\r\n      tasks[index].status = !tasks[index].status;\r\n      this.setState({\r\n        tasks: tasks\r\n      });\r\n      localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }\r\n  }\r\n\r\n  findIndex(id) {\r\n    let { tasks } = this.state;\r\n    let result = -1;\r\n    tasks.forEach((task, index) => {\r\n      if (task.id === id) {\r\n        result = index;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  onRemove = (id) => {\r\n    let { tasks } = this.state;\r\n    let index = this.findIndex(id);\r\n    if (index !== -1) {\r\n      tasks = tasks.filter((task) =>\r\n        task.id !== id);\r\n      this.setState({\r\n        tasks: tasks\r\n      });\r\n      localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }\r\n  }\r\n\r\n  onUpdate = (id) => {\r\n    let { tasks } = this.state;\r\n    let index = this.findIndex(id);\r\n    let taskEditing = tasks[index];\r\n    this.setState({\r\n      taskEditing: taskEditing\r\n    });;\r\n    this.onShowForm();\r\n  }\r\n\r\n  onFilter= (filterName,filterStatus) => {\r\n      filterStatus = parseInt(filterStatus);\r\n      this.setState({\r\n        filter : {\r\n          filterName : filterName.toLowerCase(),\r\n          filterStatus : filterStatus\r\n        }\r\n      });\r\n  }\r\n\r\n  onSearch = (keyword) => {\r\n    this.setState({\r\n      keyword : keyword\r\n    });\r\n  }\r\n\r\n  onSort = (sortBy,sortValue) => {\r\n    this.setState({ \r\n      sortBy : sortBy,\r\n      sortValue : sortValue \r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { tasks, isDisPlayForm, taskEditing, filter, keyword,sortBy,sortValue } = this.state;\r\n    if(filter) {\r\n      if(filter.filterName) {\r\n        tasks = tasks.filter((task) => {\r\n          return task.name.toLowerCase().indexOf(filter.filterName) !== -1;\r\n        });\r\n      }\r\n      // if(filter.filterStatus) {\r\n        tasks = tasks.filter((task) => {\r\n          if(filter.filterStatus === -1) {\r\n            return tasks;\r\n          } else {\r\n            return task.status === (filter.filterStatus === 1 ? true : false); \r\n          }\r\n        });\r\n      // }\r\n    }\r\n    if(keyword) {\r\n      tasks = tasks.filter((task) => {\r\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n      });\r\n    }\r\n    if(sortBy==='name') {\r\n      tasks.sort((a,b) => {\r\n        if(a.name > b.name) {\r\n          return -sortValue;\r\n        } else if(a.name < b.name) {\r\n          return sortValue;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    } else {\r\n      tasks.sort((a,b) => {\r\n        if(a.status > b.status) {\r\n          return -sortValue;\r\n        } else if(a.status < b.status) {\r\n          return sortValue;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    }\r\n    var elmTaskForm = isDisPlayForm ? <TaskForm onSubmit={this.onSubmit} onCloseForm={this.onCloseForm} task={taskEditing} /> : '';\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"text-center\">\r\n          <h1>Quản Lý Công Việc</h1>\r\n          <hr />\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n            {elmTaskForm}\r\n          </div>\r\n          <div className={isDisPlayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\r\n            <button type=\"button\" className=\"btn btn-primary mb-15 mr-15\" onClick={this.showTaskForm}>\r\n              <span className=\"fa fa-plus mr-5\" />Thêm Công Việc\r\n            </button>\r\n            <button type=\"button\" className=\"btn btn-primary mb-15\" onClick={this.onGenerateData}>\r\n              Generate data\r\n            </button>\r\n            <ConTrol onSearch={this.onSearch} onSort={this.onSort} sortBy={sortBy} sortValue={sortValue} />\r\n            <div className=\"row mt-15\">\r\n              <TaskList listTasks={tasks} onUpdateStatus={this.onUpdateStatus} onRemove={this.onRemove} onUpdate={this.onUpdate} onFilter = {this.onFilter} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}